#!/usr/bin/env python
import datetime
import json
import os

import click

try:
    import git

    has_git = True
except ImportError:
    has_git = False

import deployment_checks
from markdown import get_all_codeblocks


@click.group()
def cli():
    pass


@click.command()
@click.argument("path", default="docs/")
@click.option("--project", default="YOUR_PROJECT_ID", help="Replacement Project ID")
@click.option("--instance", default="psql", help="Replacement SQL Instance name")
@click.option("--region", default="us-central1", help="Replacement Google Cloud region")
def gen(path, project, instance, region):
    """Generate a script to deploy unicodex"""
    if has_git:
        try:
            repo = git.Repo(search_parent_directories=True)
            sha = repo.head.object.hexsha
            branch = repo.active_branch.name
            gitinfo = f"# git: {branch}, sha {sha}"
        except git.InvalidGitRepositoryError as e:
            gitinfo = "# static files (not in an active git directory)"
    else:
        gitinfo = "# no local install of git found"

    r = [
        "#!/bin/bash",
        "shopt -s expand_aliases",
        "",
        f"# Generated from {path} on {str(datetime.datetime.now())}",
        gitinfo,
        "# execute with: bash -ex script.sh for echo output",
        "",
    ]
    r.extend(get_all_codeblocks(path))

    script = "\n".join(r)
    script = script.replace("YourProjectID", project)
    script = script.replace("YourInstanceName", instance)
    script = script.replace("us-central1", region)
    print(script)


@click.command()
@click.argument("path", default="docs/", type=click.Path(exists=True))
def check_env(path):
    """Check the locally defined environment variables"""
    envvars = {}
    code = "\n".join(get_all_codeblocks(path)).split("\n")
    for line in code:
        if "export" in line:
            var = line.split(" ")[1].split("=")[0]
            envvars[var] = os.environ.get(var, "None")
    print(json.dumps(envvars, indent=4))


@click.command()
@click.argument("project", envvar="PROJECT_ID")
@click.option("--service", default="unicodex", help="The service name")
@click.option(
    "--region", default="us-central1", help="The region the service is deployed in"
)
@click.option(
    "--secret",
    default="django_settings",
    help="The name of the secret containing the django env",
)
def check_deploy(project, service, region, secret):
    """Check a unicodex deployment"""
    deployment_checks.check_deploy(project, service, region, secret)


cli.add_command(gen)
cli.add_command(check_env)
cli.add_command(check_deploy)

if __name__ == "__main__":
    cli()
